---

---
<script>
  const qtRegExp = /QT_(\w+)/g
  const qsRegExp = /QS_(\w+)/g
  setTimeout(() =>{
  const blocks = document.querySelectorAll("pre")
  if (blocks.length > 0) {
    blocks.forEach((block) => {
      const content = block.textContent
      const elements = block.querySelectorAll("span")
      const classElements:HTMLSpanElement[] = [];
      if (elements.length === 0) {
        console.log("NO SPAN ELEMENTS FOUND")
      }

      elements.forEach(element => {
        const isClassColored = element.style.cssText === "color: rgb(255, 203, 107);"
        const isSignal = element.innerText.trim().startsWith("on")
        const qualifier = isClassColored && !isSignal

        if (qualifier) {
          const dotSibling = element.nextSibling
          const isSplit = dotSibling?.textContent === "."

          if (isSplit) {
            let newInnerText = element.innerText + dotSibling.textContent + dotSibling.nextSibling?.textContent

            if (dotSibling.nextSibling) {
              dotSibling.nextSibling.textContent !== " {"
                ? dotSibling.nextSibling.remove()
                : null
            }

            dotSibling.remove()
            element.innerText = newInnerText
          }
          classElements.push(element)
        }
      })

      if (content) {
        const qtMatch = [...content.matchAll(qtRegExp)]
        const qsMatch = [...content.matchAll(qsRegExp)]

        if (qtMatch.length > 0) {
          for (const qtMatching of qtMatch) {
            const newATag = document.createElement("a")
            const qtBelongs = qtMatching[0].split("_")[1].replace("11", "-") || null
            const qtClass = qtMatching[1].split("_")[1]
            const link = `https://doc.qt.io/qt-6/qml-${qtBelongs ? `${qtBelongs}-${qtClass.toLowerCase()}` : "qtquick-" + qtClass.toLowerCase()}.html`
            newATag.target = "_blank"
            newATag.href = link
            newATag.innerText = qtClass
            const homeElement = classElements.find(item => {
              const spacing = item.innerText.replace(qtMatching[0], "")
              if (item.innerText.trim() === qtMatching[0].trim()){
                newATag.innerText = spacing + qtClass
                return true
              }
            })
            if (homeElement) {
              homeElement.innerText = ""
              homeElement.appendChild(newATag)
            }
          }
        }
        if (qsMatch.length > 0) {
          for (const qsMatching of qsMatch) {
            const newATag = document.createElement("a")

            const qsBelongs = qsMatching[0].split("_")[1].replace("00", ".") || null
            const qsClass = qsMatching[1].split("_")[1]

            const link = `/docs/types/${qsBelongs ? `${qsBelongs}/${qsClass}` : qsClass}`
            newATag.target = "_blank"
            newATag.href = link

            const homeElement = classElements.find(item => {
              const existingItem = item.innerText.trim()
              const matchingItem = qsMatching[0].trim()
              const spacing = item.innerText.replace(existingItem, "")

              if (existingItem === matchingItem) {
                newATag.innerText = spacing + qsClass
                return true
              }
            })

            if (homeElement) {
              homeElement.innerText = ""

              if (homeElement.nextSibling) {
                homeElement.nextSibling.textContent !== " {"
                  ? homeElement.nextSibling.textContent = ""
                  : null
              }
              homeElement.appendChild(newATag)
            }
          }
        }
      }
    });
  }
  },3000)
</script>
